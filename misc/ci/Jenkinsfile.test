library 'z-common@feat-231130'

pipeline {
  agent {
    kubernetes {
      inheritFrom 'build-docker code-scan xuanim'
    }
  }

  parameters {
    booleanParam defaultValue: false, description: '执行代码扫描', name: 'code_scan_enabled'
    booleanParam defaultValue: false, description: '全量单元测试', name: 'full_unit_test'
  }

  environment {
    ZENTAO_VERSION = """${sh(
                            returnStdout: true,
                            script: 'cat VERSION'
    ).trim()}"""

    MIDDLE_IMAGE_REPO = 'hub.qc.oop.cc/zentao-ztf'
    MIDDLE_IMAGE_TAG = """${sh(
                            returnStdout: true,
                            script: 'echo $BUILD_ID-${GIT_COMMIT}'
    ).trim()}"""
    
    XIM_GROUPS = "31a0008b-6e3e-4b7f-9b7b-396a46b1f8f4"
  }

  stages {
    stage('prepare') {
      steps {
        echo 'checkout code success'
        script {
            env.GIT_URL = sh(returnStdout: true, script: 'git config --get remote.origin.url').trim()
            env.GIT_COMMIT = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
              
            def j = job.newJob()
            env.GIT_BRANCH = j.getBranchById(env.GIT_COMMIT)

            sh(returnStdout: false, script: '''curl $JOB_URL$BUILD_ID/api/json > .job.json''')
            env.CHANGED_MODULES= sh(returnStdout: true, script: '''jq -r ".changeSets[].items[] | .affectedPaths[]" < .job.json | grep 'module/' | awk -F '/' '{print "/apps/zentao/"$1"/"$2}' | sort -u | xargs''').trim()
            env.CHANGED_MODULE_AUTHORS = sh(returnStdout: true, script: '''jq -r '.changeSets[].items[] | select(any(.affectedPaths[]; startswith("module"))) | .author.fullName' < .job.json | sort -u | paste -s -d "," - ''').trim()
        }
        sh 'env'
      }
    }

    stage('build quality') {
      parallel {
        stage('SonarQube') {
          when { expression { return params.code_scan_enabled } }
          steps {
            container('sonar') {
              withSonarQubeEnv('sonarqube') {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                  sh 'git config --global --add safe.directory $(pwd)'
                  sh 'sonar-scanner -Dsonar.analysis.user=$(git show -s --format=%ae)'
                }
              }
            }
          }
          post {
            success {
              ximNotify(title: "禅道代码扫描正常", content: "", url="https://sonar.qc.oop.cc/dashboard?id=zentaopms&branch=${env.GIT_BRANCH}")
            }
            failure {
              ximNotify(title: "禅道代码扫描异常", content: "", url="https://sonar.qc.oop.cc/dashboard?id=zentaopms&branch=${env.GIT_BRANCH}")
            }
          }
        }

        stage('Unit Test') {
          when {
            expression {
              return env.CHANGED_MODULES != '' || params.full_unit_test
            }
          }
          stages {
            stage('Build Image') {
              steps {
                container('docker') {
                  sh 'docker build --pull . -f misc/ci/Dockerfile.test --build-arg VERSION=${ZENTAO_VERSION} --build-arg MIRROR=true -t ${MIDDLE_IMAGE_REPO}:${MIDDLE_IMAGE_TAG}'
                  sh 'docker push ${MIDDLE_IMAGE_REPO}:${MIDDLE_IMAGE_TAG}'
                }
              }
              post {
                success {
                  echo 'build image success'
                }
                failure {
                  ximNotify(title: "测试镜像构建失败", content: "")
                }
              }
            }

            stage('Run') {
              agent {
                kubernetes {
                  inheritFrom 'xuanim'
                  containerTemplate {
                    name 'zentao'
                    image "${MIDDLE_IMAGE_REPO}:${MIDDLE_IMAGE_TAG}"
                    command "/usr/bin/entrypoint.sh"
                  }
                }
              }
              options { skipDefaultCheckout() }
                
              environment {
                DATA_REPORT_TOKEN = credentials('data_report_token')
              }

              steps {
                script {
                  def mode = "全量测试"
                  def targetDir = "/apps/zentao/module"
                  if (!params.full_unit_test) {
                    mode = "增量测试"
                    targetDir = env.CHANGED_MODULES
                    if (env.CHANGED_MODULE_AUTHORS) {
                      def ximUsers = env.CHANGED_MODULE_AUTHORS
                      env.XIM_USERS = ximUsers
                    }

                  }

                  def j = job.newJob()
                  j.SaveHeadReport(job.headerFileName())

                  stage(mode) {
                    container('zentao') {
                      sh 'rm -f /bin/sh && ln -s /bin/bash /bin/sh'
                      sh '''
                        . /etc/s6/s6-init/envs
                        . /opt/easysoft/scripts/libmysql.sh
                        wait_for_mysql && initdb.php > /apps/zentao/unittestdb
                        /apps/zentao/test/runtime/ztf ''' + targetDir + ''' -C 11 | tee /apps/zentao/test/${MIDDLE_IMAGE_TAG}.log
                        chmod -R 777 /root
                        parsehtml.php
                        initdb.php /apps/zentao/unittestdb'''
                      publishHTML (target : [allowMissing: false,alwaysLinkToLastBuild: false,keepAll: true,reportDir: 'coverage',reportFiles: 'index.html',reportName: 'UT Coverage Report',reportTitles: 'UT Coverage Report'])
                      sh 'pipeline-unittest.sh /apps/zentao/test/${MIDDLE_IMAGE_TAG}.log'
                    }
                  }
                }
 
              }

              post {
                failure {
                  ximNotify(title: "单元测试失败", content: "单元测试未通过, [查看报告]($JOB_URL$BUILD_ID/UT_20Coverage_20Report/)", contentHeaderFile: job.headerFileName())
                }
              }
            }
          }
        }//End unittest
      }
    }
  }// End Root Stages
} // End pipeline



